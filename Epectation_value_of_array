'''We are given an array of n integers. Let us define score as the sum of value obtained after each step of the below operation, until there is one element left in the array. We do the following operation until there is only one element left in the array :-

Take any adjacent two numbers, add them, and replace the two numbers with their sum at the same position. For example, if the array initially is arr = [3,2 4,5,4], then after say picking, arr[1] and arr[2] (0- indexed), the new array becomes [3,6,5,4], and this adds a value arr[1] + arr[2] = 6, to the score. We continue with the operations from the new state of the array until we reach the end as stated above.

Print the expected value of score after all operations get exhausted.

NOTE:

By expected value, I mean that expected value of score obtained in all possible configurations. Assume that for a given array, picking any adjacent elements is equally likely.

Constraints:

Test Set 1
n <= 8

Test Set 2
n <= 1000

Example:

Consider an array initally given as:
arr = [2, 3, 3]

Answer: 13.5

Initially your score is 0, so after first step, your score can become:
arr = [5, 3], score = arr[0] + arr[1] = 5 (adjacent elements only)
and then finally arr = [8], score += 8 => score = 13

Another possible way would be,
arr = [2, 6], score = arr[1] + arr[2] = 6, followed by final step same as above, i.e, arr = [8], score += 8 => score = 14

So expected value of score is, (14 + 13)/2 = 13.5'''



def prob(arr, n):
    if n==1:
        return 0
    if n==2:
        return sum(arr)
    print(arr)
    SUM = 0
    for i in range(n-1):
        SUM += (1/(n-1))*((arr[i] + arr[i+1]) + prob(arr[:i] + [arr[i] + arr[i+1]] + arr[i+2:], n-1)) #at each iteration size reduces by 1
    print(SUM, n)
    return SUM

print(prob([2, 3, 3],3))














